import logging
import time
import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from bot_config import TOKEN_API

logging.basicConfig(level=logging.INFO)

BOT = Bot(TOKEN_API)

storage = MemoryStorage()
dp = Dispatcher(BOT, storage=storage)

# Connection to DB
con = sqlite3.connect('phones.db')
cursor = con.cursor()


class UserChoice(StatesGroup):
    user_choice = State()


# Greetings user
@dp.message_handler(commands=['start'])
async def greeting_user(message: types.Message):
    await message.answer("üëãüèª–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º.")
    time.sleep(2)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∏—Å–∫–æ–º–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫ –ø—Ä–∏–º–µ—Ä—É "Samsung Galaxy A33" –∏–ª–∏ '
                         '"iPhone 13" ')


@dp.message_handler()
async def phone_model(message: types.Message, state: FSMContext):
    await message.answer('–ò–¥—ë—Ç –ø–æ—Å–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æüîé.')

    user_model = message.text
    query = f"""SELECT model FROM rozetka WHERE model LIKE '%{user_model}%'  
                UNION 
                SELECT model FROM q_techno WHERE model LIKE '%{user_model}%'"""
    cursor.execute(query)
    button_names = cursor.fetchall()
    time.sleep(1.500)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for btn in button_names:
        kb.add(KeyboardButton(btn[0]))
    await message.answer(text="–í–∏–±–∏—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö –Ω–∏–∂–µüëá:",
                         reply_markup=kb)
    await UserChoice.user_choice.set()


@dp.message_handler(state=UserChoice.user_choice)
async def user_chosen(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        user_message = data['text']
        url_query = f"""SELECT url FROM rozetka WHERE model LIKE '%{user_message}%'  
                UNION 
                SELECT url FROM q_techno WHERE model LIKE '%{user_message}%'"""
        cursor.execute(url_query)
        url = cursor.fetchall()
        await message.reply(f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {url[0][0]}")
        await state.finish()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
